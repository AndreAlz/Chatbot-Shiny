DATE_FORMAT(TIMESTAMPADD(Second,TIMESTAMPDIFF(SECOND,UTC_TIMESTAMP(),now())+(wo.COMPLETEDTIME/1000),'1970-01-01 00:00:00'),'%Y-%m-%d %h:%i:%s')AS 'FECHACIERRE'
from WorkOrder  wo
LEFT JOIN RequestResolver rrr ON wo.WORKORDERID=rrr.REQUESTID
LEFT JOIN RequestResolution rrs ON rrr.REQUESTID=rrs.REQUESTID
LEFT JOIN WorkOrderStates wos ON wo.WORKORDERID=wos.WORKORDERID
LEFT JOIN SDUser sdu ON wo.REQUESTERID=sdu.USERID
LEFT JOIN AaaUser aau ON sdu.USERID=aau.USER_ID
LEFT JOIN SDUser td ON wos.OWNERID=td.USERID
LEFT JOIN AaaUser ti ON td.USERID=ti.USER_ID
LEFT JOIN StatusDefinition std ON wos.STATUSID=std.STATUSID
WHERE FROM_UNIXTIME(wo.CREATEDTIME/1000) BETWEEN ' "
consultap2="00:00:00'  AND NOW() "
#Concatenamos el query con el ticket ingresado
sqlquery=paste(consulta,fecha,consultap2,sep = " ")
#enviamos la consulta y luego la guardamos en la variable RESULT
res = dbSendQuery(conn, sqlquery)
result = dbFetch(res, 10)
print(result)
},
"0"={
print("Bueno nos vemos mas tarde")
break;
}
)
}
}
chatbot_proto()
chatbot_proto()
shiny::runApp('direct')
runApp('direct')
runApp('direct')
library(stringr)
shiny::runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
shiny::runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
tabledata=read_excel("~/libro1.xlsx",1)
tabledata
DT=data.table(t(tabledata))
DT
query=paste('INSERT INTO catalogo(nombre, campa, anexo, cel)\nVALUES\n',
gsub('"',"'",gsub('c','',(DT[,paste(.SD,",",collapse='\n')]))))
query
query=paste('INSERT INTO catalogo(nombre, campa, anexo, cel) VALUES ',
gsub('"',"'",gsub('c','',(DT[,paste(.SD,",")]))))
qery
query
query=paste('INSERT INTO catalogo(nombre, campa, anexo, cel)\nVALUES\n',
gsub('"',"'",gsub('c','',(DT[,paste(.SD,",",collapse='\n')]))))
cat(query)
tama=str_length(query);
str_sub(query,tama)=";";
cat(query)
conn=connectMySQL()
res=dbSendQuery(conn,query)
result = dbFetch(res,n=-1)
result
res
res=dbSendQuery(conn,query)
dbClearResult(res)
dbDisconnect(conn)
DT
query=paste('INSERT INTO catalogo(nombre, campa, anexo, cel)\nVALUES\n',
gsub('"',"'",gsub('c','',(DT[,paste(.SD,",",collapse='\n')]))))
tama=str_length(query);
str_sub(query,tama)=";";
cat(QUERY)
cat(query)
conn=connectMySQL()
res=dbSendQuery(conn,query)
result = dbFetch(res,n=-1)
result
dbClearResult(res)
consultaquery2="select * from catalogo"
res = dbSendQuery(conn, consultaquery2)
result = dbFetch(res,n=-1)
datafinal<<-result
datafinal
query=paste('INSERT INTO catalogo(nombre, campa, anexo, cel)\nVALUES\n',
gsub('"',"'",gsub('c','',(DT[,paste(.SD,",",collapse='\n')]))))
tama=str_length(query);
str_sub(query,tama)=";";
res=dbSendQuery(conn,query)
result = dbFetch(res,n=-1)
datafinal<<-result
datafinal
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
conn=connectMySQL()
res = dbSendQuery(conn, "select * from catalogo")
datafinal = dbFetch(res,n=-1)
dbClearResult(res)
dbDisconnect(conn)
View(datafinal)
1234=datafinal[,4]
if(1234==datafinal[,4]){}
if(1234==datafinal[,4]){print("hola")}
matrix(nrow = 2, ncol = 2)
matrix(nrow = 2, ncol = 1)
a=matrix(nrow = 2, ncol = 1)
a[,1]=1234
a
if(a==datafinal[,4]){print("hola")}
match(2,datafinal[,4],nomatch = 0)
match(1234,datafinal[,4],nomatch = 0)
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
a=matrix(nrow = 3,nrow(1))
a=matrix(nrow = 3,ncol = (1))
a=
a
a[,1]=1235
a[,1]=1234
match(a,datafinal[,4])
match(datafinal[,4],a)
runApp('direct')
shiny::runApp('direct')
shinyUI(
fluidPage(
uiOutput
)
)
shiny::runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
shiny::runApp('direct')
shiny::runApp('direct')
runApp('direct')
shiny::runApp('direct')
bplantilla
runApp('direct')
runApp('direct')
a="hola"
b="pedro"
if(a=="perro" || b=="pedro"){print(a)}
a=""
if(a=="perro" || b=="pedro"){print("hola")}
if(a=="" || b=="pero"){print("hola")}
shiny::runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
if(a=="" && b=="pero"){print("hola")}
a=""
b
if(a=="" && b=="pedro"){print("hola")}
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
shiny::runApp('direct')
r=read_excel(path = "~/Documents/base.xlsx", sheet = 1)
r=read_excel(path = "C:/Users/practicante/Documents/base.xlsx", sheet = 1)
View(r)
r
r[1,1]
filei=t(as.numeric(unlist(r[,3])));
filei
length(filei)
if(flag==0){
consulta1="insert into catalogo(nombre, campa, anexo, cel, sede,cargo) value ('"
consulta2="', '"
consulta3="')"
query=paste(consulta1,
fileb[i,1],consulta2,fileb[i,2],
consulta2,fileb[i,3],consulta2,fileb[i,4],
consulta2,fileb[i,5],consulta2,fileb[i,6],
consulta3,sep = "")
# DT=data.table(t(fileb[i,]))
# query=paste('INSERT INTO catalogo(nombre, campa, anexo, cel,sede,cargo)\nVALUES\n',
#             gsub('"',"'",gsub('c','',(DT[,paste(.SD,",",collapse='\n')]))))
# tama=str_length(query);
# str_sub(query,tama)=";";
res=dbSendQuery(conn,query)
dbClearResult(res)
}
runApp('direct')
length(r)
r=read_excel(path = "C:/Users/practicante/Documents/base.xlsx", sheet = 1)
length(r)
DT=data.table(t(r))
DT
DT=data.table(r)
DT
DT[1,1]
length(DT[,4])
length(DT[4,])
length(DT[4,1])
DT[4,1]
filei=t(as.numeric(unlist(DT[,3])));
filei
length(filei)
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
runApp('direct')
toString(filei[1,i]
toString(filei[1,i])
toString(filei[1,1])
toString(filei[1,2])
conn=connectMySQL()
consultaquery="select anexo from catalogo"
resu = dbSendQuery(conn, consultaquery)
sqlb = dbFetch(resu,n=-1)
toString(sqlb[1,4])
toString(sqlb[2,4])
toString(sqlb[4,1])
sqlb
runApp('direct')
flag=1
flag=0
runApp('direct')
runApp('direct')
runApp('direct')
conn=conne
consultaquery="select anexo from catalogo"
resu = dbSendQuery(conn, consultaquery)
sqlb = dbFetch(resu,n=-1)
conn=connectMySQL()
consultaquery="select anexo from catalogo"
resu = dbSendQuery(conn, consultaquery)
sqlb = dbFetch(resu,n=-1)
length(sqlb)
length(sqlb[,1])
runApp('direct')
d=matrix(nrow = 0, ncol = 6)
d
View(sqlb)
clear
r=read_excel(path = "C:/Users/practicante/Documents", sheet = 1)
r=read_excel(path = "C:/Users/practicante/Documents/base.xlsx", sheet = 1)
r
d=rbind(d,r[1,])
d
d=rbind(d,r[3,])
d
runApp('direct')
runApp('direct')
runApp('direct')
shiny::runApp('shinybot')
runApp('shinybot')
setwd("~/shinybot")
source("crcoan.R")
d1=processingData1()
library(shiny)
library(caret)
library(DBI)
library(RMySQL)
library(xlsx)
d1=processingData1()
d2=processingData2()
saveRDS(d1, "tranning_data_1.RDS")
saveRDS(d2, "tranning_data_2.RDS")
tranning_data_1 <- readRDS("~/shinybot/tranning_data_1.RDS")
tranning_data_2 <- readRDS("~/shinybot/tranning_data_2.RDS")
View(tranning_data_1)
View(tranning_data_2)
knn1=creaModelknn(1)
knn2=creaModelknn(2)
test=partirmensaje("Necesito ayuda con un ticket")
test
predict(knn1, test[,6:/])
predict(knn1, test[,6:7])
View(tranning_data_1)
predict(knn2, test[,2:5])
library(shiny)
library(caret)
library(DBI)
library(RMySQL)
library(xlsx)
source("crcoan.R")
model_knn1=creaModelknn(1)
tranning_data_1 <- readRDS("~/shinybot/tranning_data_1.RDS")
View(tranning_data_1)
runApp()
model_knn1=creaModelknn(1)
eval=partirmensaje("hola como estas")
resultado=predict(model_knn1, eval[,6:7])
resultado
Diccionary <- readRDS("~/shinybot/Diccionary.RDS")
View(Diccionary)
tranning_data_1 <- readRDS("~/shinybot/tranning_data_1.RDS")
View(tranning_data_1)
datafinal=processingData1()
datafinal
x <- "MiXeD cAsE 123"
chartr("iXs", "why", x)
chartr("a-cX", "D-Fw", x)
tolower(x)
toupper(x)}
x <- "MiXeD cAsE 123"
chartr("iXs", "why", x)
chartr("a-cX", "D-Fw", x)
tolower(x)
toupper(x)
runApp()
runApp()
d1=processingData1()
d3=processingData2()
saveRDS(d1, "tranning_data_1.RDS")
saveRDS(d3, "tranning_data_2.RDS")
library(shiny)
library(caret)
library(DBI)
library(RMySQL)
library(xlsx)
source("crcoan.R")
runApp()
tranning_data_1 <- readRDS("~/shinybot/tranning_data_1.RDS")
View(tranning_data_1)
runApp()
runApp()
runApp()
library(shiny)
library(caret)
library(DBI)
library(RMySQL)
library(xlsx)
source("crcoan.R")
model_knn1=creaModelknn(1)
eval=partirmensaje(tolower(toString(14521)))
resultado=predict(model_knn1, eval[,6:7])
resultado
resultado
eval
tranning_data_1 <- readRDS("~/shinybot/tranning_data_1.RDS")
View(tranning_data_1)
eval=partirmensaje(tolower(toString("mi numero de ticket es 124")))
resultado=predict(model_knn1, eval[,6:7])
resultado
eval=partirmensaje(tolower(toString("124")))
resultado=predict(model_knn1, eval[,6:7])
resultado
d1=processingData1()
d1
saveRDS(d1,"tranning_data_1.RDS")
runApp()
runApp()
runApp()
batch1=read.xlsx('~/shinybot/batch.xlsx' , sheetIndex =1)
View(batch1)
batch1=read.xlsx('~/shinybot/batch.xlsx' , sheetIndex =1)
View(batch1)
d1=processingData1()
d1
saveRDS(d1, "tranning_data_1.RDS")
tranning_data_1 <- readRDS("~/shinybot/tranning_data_1.RDS")
View(tranning_data_1)
runApp()
model_knn1=creaModelknn(1)
eval=partirmensaje(tolower(toString(20151)))
EVAL
eval
resultado=predict(model_knn1, eval[,6:7])
resultado
resultado=predict(model_knn1, eval[,6:7])
resultado
resultado=predict(model_knn1, eval[,6:7])
resultado
library(shiny)
library(caret)
library(DBI)
library(RMySQL)
library(xlsx)
source("crcoan.R")
d1=processingData1()
d1
saveRDS(d1,"tranning_data_1.RDS")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.numeric(12334)
is.numeric("12334")
!is.na(as.numeric("12334"))
runApp()
runApp()
!is.na(as.numeric("12/12/2018"))
library(lubridate)
IsDate <- function(mydate) {
tryCatch(!is.na(as.Date(mydate, "",tryFormats = c("%Y-%m-%d", "%Y/%m/%d","%d-%m-%Y","%m-%d-%Y"))),
error = function(err) {FALSE})
}
IsDate("2018-02-02")
IsDate("02/02/2018")
library(shiny)
library(caret)
library(DBI)
library(RMySQL)
library(xlsx)
source("crcoan.R")
library(lubridate)
library(shiny)
library(caret)
library(DBI)
library(RMySQL)
library(xlsx)
library(lubridate)
source("crcoan.R")
runApp()
isDate("hola")
isDate("sdfsfs")
isDate("que")
isDate("")
isDate(" ")
IsDate <- function(mydate, date.format = "%d/%m/%y") {
# Check if field is a date using as.Date that looks for unambiguous dates
#   Assumes date format so NA returned not Character error.
#   Why? with no date format, R tries two defaults then gives error.
#   BUT With a dateformat R returns NA
# Args
#   Suspected date and optional date format string
# Returns
#   TRUE if thinbks it is a date
tryCatch(!is.na(as.Date(mydate, date.format)),
error = function(err) {FALSE})
}
IsDate("well")
IsDate <- function(fecha) {
if (!is.na(as.Date(fecha, tryFormats = c("%Y-%m-%d", "%Y/%m/%d","%d-%m-%Y","%m-%d-%Y")))) {
return(TRUE)
}else{return(FALSE)}
}
IsDate(12)
IsDate("12")
help("as.Date")
isDate <- function(fecha) {
tryCatch(!is.na(as.Date(fecha, tryFormats = c("%Y-%m-%d", "%Y/%m/%d","%d-%m-%Y","%m-%d-%Y"))),
error = function(err) {FALSE})
}
isDate(1234)
isDate("hola como estas")
isDate("2 sep)
isDate("2 sep")
library(shiny)
library(caret)
library(DBI)
library(RMySQL)
library(xlsx)
library(lubridate)
source("crcoan.R")
runApp()
!is.na(is.numeric(1422))
!is.na(is.numeric("1422"))
runApp()
runApp()
is.na(is.numeric("1234"))==TRUE
!is.na(is.numeric("1234"))==TRUE
!is.na(is.numeric("jhnj"))==TRUE
!is.na(is.numeric("hjnkjl"))==TRUE
!is.na(as.numeric("hjnkjl"))==TRUE
!is.na(as.numeric("12324"))==TRUE
!is.na(as.numeric("hjnkjl"))==TRUE
runApp()
runApp()
runApp()
runApp()
